Name: Natali Glodeanu
Group: 931
Lab1 

Specification of the task:

1. Minilanguage Specification

2. Scanner implementation

	The scanner input will be a text file containind the source program, and will produce as output the following:
	- PIF - Program Internal Form
	- ST  - Symbol Table
In addition, the program should be able to determine the lexical errors, specifying the location, and, if possible, the type of the error.

The scanner assignment will be diferentiated based on:
	1. Identifiers:
		b. arbitrary length, no more than 250 characters
	2. Symbol Table:
		b. separate tables for indentifiers, respectively constants
	3. Symbol Table Organization:
		c. hashing table
		
Codes table: 

identifier 0
constant 1
Programm 2
ProgrammEnde 3
Ganzzahlen 4
Zeichenkette 5
Fild 6
jede 7
wenn 8
oder 9
nicht 10
lesen 11
schreiben 12
Anfang 13
Ende 14
= 15
, 16
. 17
( 18
) 19
[ 20
] 21
+ 22
- 23
* 24
/ 25
< 26
> 27
<= 28
>= 29
== 30
 		

Data structures :

HashMap with key as string and value as integer   - for the storage of the codes and keys
Vector<PifEntity> PIF - elements of the PIF table
HashMap with keys the symbols for Constant table and identifier table

An entry in the PIF table is stored as an object  PifEntity with the fields: int code; String position;
The hashing function for an element in the symbol table is :
	 int hashCode()
	{
		int code=0;
		for(int i=0; i<identifier.length();i++)
		{
			code+=(int)identifier.charAt(i);
		}
		return code%53;
	}

Basic procedures :

Class Code loader with the procedure loadCodes for reading codes and values from a file
	The codes are given,each on one line: identifier code (e.g identifier 0
																constant 1 )
Class FileReader for reading the content of the actuall program (method readFile())
	-identifies the current token -> identifyTokens() 
	-identifies if is a constant or a identifer + handels lexical errors ->checkUnknownToken() 
	- prints content of the pif table ->printPIF()
Class Tables contains the hashMaps for symbol tables 
	-contains methods for adding elements in the symbol tables -> addConstant() , addIdentifer()
	-print tables 
Class Validator is a utility class used to handle lexical errors like 
	-invalid characters -> boolean hasPermitedCharacters(String element) 
	-good string composition ->int isString(String element)
	-if a string is made just by no -> boolean isNumber(String value)
	-if the first digit is a number -> boolean firstDigitNumber(String value)

	

Input example:

Programm 

Ganzzahlen a=-5 ,Ganzzahlen b=20, Ganzzahlen c,Zeichenkette="avc"

wenn(a==b)
Anfang
	a=b
	jede(c=10,c<100)
	Anfang
		a=a+1
		a=133
		a=-123
		a=123
		a=+a
		a=-a
	Ende
Ende
schreiben(a)
schreiben(a#1a#)
schreiben(aa1)
ProgrammEnde 


Output: 

Starting to read lines
Starting to scan 
String"avc"
!!Error!!  Line 19 Identifier contains symbols which are not permited a#1a#
Printing PIF
code: 2 value: -1
code: 4 value: -1
code: 0 value: a
code: 15 value: -1
code: 1 value: -5
code: 4 value: -1
code: 0 value: b
code: 15 value: -1
code: 1 value: 20
code: 4 value: -1
code: 0 value: c
code: 5 value: -1
code: 15 value: -1
code: 1 value: "avc"
code: 8 value: -1
code: 18 value: -1
code: 0 value: a
code: 30 value: -1
code: 0 value: b
code: 19 value: -1
code: 13 value: -1
code: 0 value: a
code: 15 value: -1
code: 0 value: b
code: 7 value: -1
code: 18 value: -1
code: 0 value: c
code: 15 value: -1
code: 1 value: 10
code: 0 value: c
code: 26 value: -1
code: 1 value: 100
code: 19 value: -1
code: 13 value: -1
code: 0 value: a
code: 15 value: -1
code: 0 value: a
code: 1 value: 1
code: 0 value: a
code: 15 value: -1
code: 1 value: 133
code: 0 value: a
code: 15 value: -1
code: 1 value: -123
code: 0 value: a
code: 15 value: -1
code: 1 value: 123
code: 0 value: a
code: 15 value: -1
code: 22 value: -1
code: 0 value: a
code: 0 value: a
code: 15 value: -1
code: 23 value: -1
code: 0 value: a
code: 14 value: -1
code: 14 value: -1
code: 12 value: -1
code: 18 value: -1
code: 0 value: a
code: 19 value: -1
code: 12 value: -1
code: 18 value: -1
code: 19 value: -1
code: 12 value: -1
code: 18 value: -1
code: 0 value: aa1
code: 19 value: -1
code: 3 value: -1
Printing results 
Constant table 
"avc"
100
-123
123
10
133
20
-5
1
Identifier table 
aa1
c
a
b



 


